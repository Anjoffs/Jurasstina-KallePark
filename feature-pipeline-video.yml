trigger: 
  branches:
    include:
    - features/*
    
    exclude:
    - main
    - develop

pool:
  vmImage: 'ubuntu-latest'

steps:

  # 1️⃣ Installera dependencies
  - template: templates/install-dependencies.yaml

  # 2️⃣ Installera Xvfb & ffmpeg
  - script: |
      sudo apt-get update
      sudo apt-get install -y xvfb ffmpeg
    displayName: 'Install Xvfb & ffmpeg'

  # 3️⃣ Starta Xvfb (virtuell skärm)
  - script: |
      Xvfb :99 -screen 0 1920x1080x24 &
      echo "export DISPLAY=:99" >> ~/.bashrc
      echo "DISPLAY=:99" >> $HOME/.bash_profile
      export DISPLAY=:99
    displayName: 'Start Xvfb'

  # 4️⃣ Starta inspelning med ffmpeg
  - script: |
      ffmpeg -y -video_size 1920x1080 -framerate 30 -f x11grab -i :99 -codec:v libx264 -preset ultrafast results/test_run.mp4 &
      echo $! > results/ffmpeg_pid.txt  
    # Spara PID för att kunna stoppa den senare
    displayName: 'Start video recording'

  # 5️⃣ Kör Robot Framework-testerna
  - script: |
      export DISPLAY=:99
      robot --include new-feature-video --output results/logs/output_feature_test.xml --log results/logs/log_feature_test.html --report results/logs/report_feature_test.html tests/
    displayName: 'Run Tests tagged with new-feature'

  # 6️⃣ Stoppa inspelningen även om testet failar
  - script: |
      if [ -f results/ffmpeg_pid.txt ]; then
        kill $(cat results/ffmpeg_pid.txt)
      fi
    displayName: 'Stop video recording'
    condition: always()

  # 7️⃣ Publicera Robot Framework-rapporter även vid fail
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/results/logs/'
      artifactName: 'robot-reports-feature'
    displayName: 'Publish Robot Framework Reports'
    condition: always()

  # 8️⃣ Publicera testvideon även vid fail
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.DefaultWorkingDirectory)/results/test_run.mp4'
      artifactName: 'Test Recording'
    displayName: 'Upload test video'
    condition: always()
